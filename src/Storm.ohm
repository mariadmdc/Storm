Storm {
  Program    = Statement*

  Statement
    = VarDecl
    | FunctionDecl
    | ObjectDecl
    | LoopStmt
    | IfStmt
    | SayStmt
    | StopStmt
    | ExpressionStmt

  // ─────────────────────────────────────
  // Blocks with explicit terminators
  // ─────────────────────────────────────

  VarDecl       = "set" __ LHS __ "to" __ Expression
  FunctionDecl  = "set" __ "program" __ identifier "(" ParameterList? ")" _ Block _ "end" __ "program"
  ObjectDecl    = "set" __ "object"  __ identifier "(" ParameterList? ")" _ Block _ "end" __ "object"

  LoopStmt
    = "start" __ "lap" __ LoopModifier _ Block _ "lap"
  LoopModifier = "forever"        --forever
               | Expression       --condition

  IfStmt
    = "if" __ Expression _ Block
      ( _ "else" _ Block )?
      _ "end" __ "if"

  SayStmt       = "say" __ Expression
  StopStmt      = "stop" __ "running"
  ExpressionStmt = Expression

  Block = Statement*

  // ─────────────────────────────────────
  // Expression hierarchy with comparisons
  // ─────────────────────────────────────

  Expression = OrExp

  OrExp  = AndExp ( _ "or" _ AndExp )*
  AndExp = EqExp  ( _ "and" _ EqExp  )*
  EqExp  = RelExp ( _ ("=" | "!=") _ RelExp )*
  RelExp = AddExp ( _ ("<" | ">" | "<=" | ">=") _ AddExp )?

  AddExp = MulExp ( _ ("+" | "-") _ MulExp )*
  MulExp = PowExp ( _ ("*" | "/") _ PowExp )*
  PowExp = UnaryExp ( _ "^" _ PowExp )?
  
  UnaryExp
    = ("-" | "+" | "not") _ UnaryExp
    | Postfix

  Postfix     = Atom PostfixTail*
  PostfixTail = CallTail | PropTail
  CallTail    = "(" _ CallArgList? _ ")"
  PropTail    = "." identifier

  // ─────────────────────────────────────
  // Atom-level
  // ─────────────────────────────────────

  Atom
    = NumberLiteral
    | StringLiteral
    | AskLiteral
    | identifier
    | "(" _ Expression _ ")"

  NumberLiteral = digit+ ("." digit+)?
  StringLiteral = "\"" (~"\"" any)* "\""
  AskLiteral    = "ask" __ string

  CallArgList   = ListOf<CallArg, comma>
  CallArg       = identifier __ "to" __ Expression  --named
                | Expression                       --positional

  ParameterList = ListOf<identifier, comma>
  LHS           = identifier ("." identifier)*

  // ─────────────────────────────────────
  // Keywords vs. identifiers
  // ─────────────────────────────────────

  ReservedWord
    = "set" | "program" | "object" | "start" | "lap"
    | "forever" | "if" | "else" | "end" | "say" | "stop"
    | "running" | "ask"

  identifier_noReserved
    = letter alnum*

  identifier
    = ~ReservedWord letter alnum*

  comma     = ","

  // ─────────────────────────────────────
  // Whitespace + comments
  // ─────────────────────────────────────

  _  = spacing*
  __ = spacing+

  spacing
    = " " | "\t" | "\n"
    | "#" (~"\n" any)* "\n"
}
